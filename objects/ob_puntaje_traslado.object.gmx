<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Iniciar atributos y movimiento

temp_puntaje = g_puntaje_actual;

sacar_puntajes_pantalla = true; //Al terminar la animación, si esta en "true" hace reversa las animaciones del puntaje actual y total cuando aparecieron

//Substraer puntaje actual y animarlo cuando se hace
g_puntaje_actual = 0;
with( ob_hud_puntaje_actual){ event_perform(ev_other, ev_user1); }



//Crear el path con un curvado a los costado aleatoria (izquierda o derecha del centro)
mi_path = path_add();

    //mi_path
    var text_total_y = ob_hud_puntaje_total.y + 50
    var medio_camino_y = ( g_pta_y - text_total_y );
    
    path_add_point(mi_path, g_pta_x, g_pta_y, 0);
    path_add_point(mi_path, g_pta_x + 150, medio_camino_y, 0);
    path_add_point(mi_path, g_pta_x, text_total_y, 0);
    
    path_set_precision(mi_path, 8);
    path_set_closed(mi_path, false);
    path_set_kind(mi_path, 1);
    
    if( choose(true, false) ){ path_mirror(mi_path); }
    
//Ejecutar el path (la velocidad es cero porque la posición la manejas con la libreria tweenline    
path_start(mi_path, 0, path_action_stop, false); 

tween_to(self, 0.4, array("path_position", 1, "ease", ease_linear, "oncomplete", "user0" ) );



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eliminar el path creado

path_delete(mi_path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Esconder puntaje actual y total, eliminar objeto

tween_reverse(ob_hud_puntaje_total.mi_tween); 
if( instance_exists(ob_hud_puntaje_actual) ){ tween_reverse(ob_hud_puntaje_actual.mi_tween); }

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Añadir al puntaje total y llamar alarma para eliminar


sc_puntaje_cambiar(temp_puntaje, true, false);


//Si se quiere sacar el puntaje de pantalla, se vuelve invisible el objeto y se llama a la alarme que los saca de pantalla
if( sacar_puntajes_pantalla == true ){

    visible = false;
    alarm[0] = 10;
    
}
else{

    instance_destroy();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dibujar el puntaje obtenido para sumar
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_colour(c_white);

draw_text_motion_blur_transformed(x, y, temp_puntaje, 1.25, 1.5, 0, 30, 270);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
